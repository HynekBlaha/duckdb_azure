# name: test/sql/azure_auth_local_secrets.test
# description: test azure extension authentication
# group: [azure]

require azure

require parquet

require-env DUCKDB_CLI_TEST_ENV_AVAILABLE

load __TEST_DIR__/azure_auth_local_secrets.db

statement ok
set secret_directory='__TEST_DIR__/azure_auth_local_secrets'

# Note: this test is currently not run in CI as it requires setting up quite a bit of setup.
#       for now, to run this test locally, ensure you have access to the duckdbtesting storage
#       account, then login through the cli. Then running the test with DUCKDB_CLI_TEST_ENV_AVAILABLE=1
#       should give all green!
#
# TODO: We should setup a key in CI to automatically test this. Ideally that would also involve Managed identities and
#       service principals

statement ok
CREATE PERSISTENT SECRET az1 (
    TYPE AZURE,
    PROVIDER CREDENTIAL_CHAIN,
    ACCOUNT_NAME 'duckdbtesting'
)

# With the CLI credentials, private authentication should now work
query I
SELECT count(*) FROM 'azure://testing-private/l1.parquet';
----
60175

restart

statement ok
set secret_directory='__TEST_DIR__/azure_auth_local_secrets'

# The credentials are persistent!
query I
SELECT count(*) FROM 'azure://testing-private/l[12].parquet';
----
120350

statement ok
DROP SECRET az1;

# This is the default config provider: it will allow access to public azure urls
statement ok
CREATE SECRET az1 (
    TYPE AZURE,
    ACCOUNT_NAME 'duckdbtesting'
)

query I
SELECT count(*) FROM 'azure://testing-public/l1.parquet';
----
60175

statement error
SELECT count(*) FROM 'azure://testing-private/l1.parquet';
----
failed to authenticate the request

statement ok
DROP SECRET az1;

# Now use the credential provider with a chain that won't work
statement ok
CREATE PERSISTENT SECRET az1 (
    TYPE AZURE,
    PROVIDER CREDENTIAL_CHAIN,
    CHAIN 'env',
    ACCOUNT_NAME 'duckdbtesting'
)

statement error
SELECT count(*) FROM 'azure://testing-private/l1.parquet';
----
IO Error: AzureStorageFileSystem could not open file: 'azure://testing-private/l1.parquet', unknown error occured, this could mean the credentials used were wrong. Original error message: 'Failed to get token from ChainedTokenCredential.'

# Currently, when providing a credential provider secret that does not yield a token, even public request fail
statement error
SELECT count(*) FROM 'azure://testing-public/l1.parquet';
----
IO Error: AzureStorageFileSystem could not open file: 'azure://testing-public/l1.parquet', unknown error occured, this could mean the credentials used were wrong. Original error message: 'Failed to get token from ChainedTokenCredential.'

statement ok
DROP SECRET az1

# Now use the credential provider with the provider that does work
statement ok
CREATE PERSISTENT SECRET az1 (
    TYPE AZURE,
    PROVIDER CREDENTIAL_CHAIN,
    CHAIN 'cli',
    ACCOUNT_NAME 'duckdbtesting'
)

# Auth works again!
query I
SELECT count(*) FROM 'azure://testing-private/l1.parquet';
----
60175